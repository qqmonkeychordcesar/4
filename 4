def func1(arg1, arg2):
    var15 = func5()
    var20 = func6(arg1, arg2)
    var25 = func7(var20, arg2)
    var26 = (arg1 + (var20 & 1039896921 + var20) + (arg1 + -407) - arg2 + arg1) - var25
    var27 = ((((-92527644 + (((((var25 & var15) - (arg2 - arg1) ^ var15 + -1923113009 + (var26 & var15 & arg2) ^ var15 + var15) ^ var25 & var20) & var26) ^ -580) - -428289427) & var20) - 241 ^ -1790160786) & arg1) + -249311498
    result = arg1 | ((var15 - 211) | (arg2 | ((arg2 - arg2 + (var26 ^ 355 + (var27 - var15) + 1114262242)) - -298)))
    return result
def func7(arg21, arg22):
    var23 = 0
    for var24 in range(31):
        var23 += 1 ^ var24 - var24
    return var23
def func6(arg16, arg17):
    var18 = 0
    for var19 in range(35):
        var18 += arg16 ^ arg17 - var19
    return var18
def func5():
    func2()
    result = len((5 - -9 for i in func4(5, 9)))
    func3()
    return result
def func4(arg3, arg4):
    var5 = (-338 | 1625290569) & arg3 & 681325747
    yield var5
    var6 = ((-1713142759 + -571) ^ var5) & arg3
    yield var6
    var7 = var6 - -1269452740 ^ 864
    yield var7
    var8 = (arg3 & arg4 | var7) | arg4
    yield var8
    var9 = arg3 & ((var6 ^ var5) ^ arg4)
    yield var9
    var10 = var8 - arg3 + var9
    yield var10
    var11 = 442 ^ (843 - var7)
    yield var11
    var12 = -1049566306 | -471 ^ var7 | var10
    yield var12
    var13 = arg3 & var11
    yield var13
    var14 = (var8 & var6 & var10) + var12
    yield var14
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 2
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 28'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var15 = func5()
    var20 = func6(arg1, arg2)
    var25 = func7(var20, arg2)
    var26 = (arg1 + (var20 & 1039896921 + var20) + (arg1 + -407) - arg2 + arg1) - var25
    var27 = ((((-92527644 + (((((var25 & var15) - (arg2 - arg1) ^ var15 + -1923113009 + (var26 & var15 & arg2) ^ var15 + var15) ^ var25 & var20) & var26) ^ -580) - -428289427) & var20) - 241 ^ -1790160786) & arg1) + -249311498
    result = arg1 | ((var15 - 211) | (arg2 | ((arg2 - arg2 + (var26 ^ 355 + (var27 - var15) + 1114262242)) - -298)))
    return result
def func7(arg21, arg22):
    var23 = 0
    for var24 in range(31):
        var23 += 1 ^ var24 - var24
    return var23
def func6(arg16, arg17):
    var18 = 0
    for var19 in range(35):
        var18 += arg16 ^ arg17 - var19
    return var18
def func5():
    func2()
    result = len((5 - -9 for i in func4(5, 9)))
    func3()
    return result
def func4(arg3, arg4):
    var5 = (-338 | 1625290569) & arg3 & 681325747
    yield var5
    var6 = ((-1713142759 + -571) ^ var5) & arg3
    yield var6
    var7 = var6 - -1269452740 ^ 864
    yield var7
    var8 = (arg3 & arg4 | var7) | arg4
    yield var8
    var9 = arg3 & ((var6 ^ var5) ^ arg4)
    yield var9
    var10 = var8 - arg3 + var9
    yield var10
    var11 = 442 ^ (843 - var7)
    yield var11
    var12 = -1049566306 | -471 ^ var7 | var10
    yield var12
    var13 = arg3 & var11
    yield var13
    var14 = (var8 & var6 & var10) + var12
    yield var14
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 2
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 28'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var15 = func5()
    var20 = func6(arg1, arg2)
    var25 = func7(var20, arg2)
    var26 = (arg1 + (var20 & 1039896921 + var20) + (arg1 + -407) - arg2 + arg1) - var25
    var27 = ((((-92527644 + (((((var25 & var15) - (arg2 - arg1) ^ var15 + -1923113009 + (var26 & var15 & arg2) ^ var15 + var15) ^ var25 & var20) & var26) ^ -580) - -428289427) & var20) - 241 ^ -1790160786) & arg1) + -249311498
    result = arg1 | ((var15 - 211) | (arg2 | ((arg2 - arg2 + (var26 ^ 355 + (var27 - var15) + 1114262242)) - -298)))
    return result
def func7(arg21, arg22):
    var23 = 0
    for var24 in range(31):
        var23 += 1 ^ var24 - var24
    return var23
def func6(arg16, arg17):
    var18 = 0
    for var19 in range(35):
        var18 += arg16 ^ arg17 - var19
    return var18
def func5():
    func2()
    result = len((5 - -9 for i in func4(5, 9)))
    func3()
    return result
def func4(arg3, arg4):
    var5 = (-338 | 1625290569) & arg3 & 681325747
    yield var5
    var6 = ((-1713142759 + -571) ^ var5) & arg3
    yield var6
    var7 = var6 - -1269452740 ^ 864
    yield var7
    var8 = (arg3 & arg4 | var7) | arg4
    yield var8
    var9 = arg3 & ((var6 ^ var5) ^ arg4)
    yield var9
    var10 = var8 - arg3 + var9
    yield var10
    var11 = 442 ^ (843 - var7)
    yield var11
    var12 = -1049566306 | -471 ^ var7 | var10
    yield var12
    var13 = arg3 & var11
    yield var13
    var14 = (var8 & var6 & var10) + var12
    yield var14
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 2
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 28'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var15 = func5()
    var20 = func6(arg1, arg2)
    var25 = func7(var20, arg2)
    var26 = (arg1 + (var20 & 1039896921 + var20) + (arg1 + -407) - arg2 + arg1) - var25
    var27 = ((((-92527644 + (((((var25 & var15) - (arg2 - arg1) ^ var15 + -1923113009 + (var26 & var15 & arg2) ^ var15 + var15) ^ var25 & var20) & var26) ^ -580) - -428289427) & var20) - 241 ^ -1790160786) & arg1) + -249311498
    result = arg1 | ((var15 - 211) | (arg2 | ((arg2 - arg2 + (var26 ^ 355 + (var27 - var15) + 1114262242)) - -298)))
    return result
def func7(arg21, arg22):
    var23 = 0
    for var24 in range(31):
        var23 += 1 ^ var24 - var24
    return var23
def func6(arg16, arg17):
    var18 = 0
    for var19 in range(35):
        var18 += arg16 ^ arg17 - var19
    return var18
def func5():
    func2()
    result = len((5 - -9 for i in func4(5, 9)))
    func3()
    return result
def func4(arg3, arg4):
    var5 = (-338 | 1625290569) & arg3 & 681325747
    yield var5
    var6 = ((-1713142759 + -571) ^ var5) & arg3
    yield var6
    var7 = var6 - -1269452740 ^ 864
    yield var7
    var8 = (arg3 & arg4 | var7) | arg4
    yield var8
    var9 = arg3 & ((var6 ^ var5) ^ arg4)
    yield var9
    var10 = var8 - arg3 + var9
    yield var10
    var11 = 442 ^ (843 - var7)
    yield var11
    var12 = -1049566306 | -471 ^ var7 | var10
    yield var12
    var13 = arg3 & var11
    yield var13
    var14 = (var8 & var6 & var10) + var12
    yield var14
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 2
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 28'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var15 = func5()
    var20 = func6(arg1, arg2)
    var25 = func7(var20, arg2)
    var26 = (arg1 + (var20 & 1039896921 + var20) + (arg1 + -407) - arg2 + arg1) - var25
    var27 = ((((-92527644 + (((((var25 & var15) - (arg2 - arg1) ^ var15 + -1923113009 + (var26 & var15 & arg2) ^ var15 + var15) ^ var25 & var20) & var26) ^ -580) - -428289427) & var20) - 241 ^ -1790160786) & arg1) + -249311498
    result = arg1 | ((var15 - 211) | (arg2 | ((arg2 - arg2 + (var26 ^ 355 + (var27 - var15) + 1114262242)) - -298)))
    return result
def func7(arg21, arg22):
    var23 = 0
    for var24 in range(31):
        var23 += 1 ^ var24 - var24
    return var23
def func6(arg16, arg17):
    var18 = 0
    for var19 in range(35):
        var18 += arg16 ^ arg17 - var19
    return var18
def func5():
    func2()
    result = len((5 - -9 for i in func4(5, 9)))
    func3()
    return result
def func4(arg3, arg4):
    var5 = (-338 | 1625290569) & arg3 & 681325747
    yield var5
    var6 = ((-1713142759 + -571) ^ var5) & arg3
    yield var6
    var7 = var6 - -1269452740 ^ 864
    yield var7
    var8 = (arg3 & arg4 | var7) | arg4
    yield var8
    var9 = arg3 & ((var6 ^ var5) ^ arg4)
    yield var9
    var10 = var8 - arg3 + var9
    yield var10
    var11 = 442 ^ (843 - var7)
    yield var11
    var12 = -1049566306 | -471 ^ var7 | var10
    yield var12
    var13 = arg3 & var11
    yield var13
    var14 = (var8 & var6 & var10) + var12
    yield var14
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 2
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 28'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var15 = func5()
    var20 = func6(arg1, arg2)
    var25 = func7(var20, arg2)
    var26 = (arg1 + (var20 & 1039896921 + var20) + (arg1 + -407) - arg2 + arg1) - var25
    var27 = ((((-92527644 + (((((var25 & var15) - (arg2 - arg1) ^ var15 + -1923113009 + (var26 & var15 & arg2) ^ var15 + var15) ^ var25 & var20) & var26) ^ -580) - -428289427) & var20) - 241 ^ -1790160786) & arg1) + -249311498
    result = arg1 | ((var15 - 211) | (arg2 | ((arg2 - arg2 + (var26 ^ 355 + (var27 - var15) + 1114262242)) - -298)))
    return result
def func7(arg21, arg22):
    var23 = 0
    for var24 in range(31):
        var23 += 1 ^ var24 - var24
    return var23
def func6(arg16, arg17):
    var18 = 0
    for var19 in range(35):
        var18 += arg16 ^ arg17 - var19
    return var18
def func5():
    func2()
    result = len((5 - -9 for i in func4(5, 9)))
    func3()
    return result
def func4(arg3, arg4):
    var5 = (-338 | 1625290569) & arg3 & 681325747
    yield var5
    var6 = ((-1713142759 + -571) ^ var5) & arg3
    yield var6
    var7 = var6 - -1269452740 ^ 864
    yield var7
    var8 = (arg3 & arg4 | var7) | arg4
    yield var8
    var9 = arg3 & ((var6 ^ var5) ^ arg4)
    yield var9
    var10 = var8 - arg3 + var9
    yield var10
    var11 = 442 ^ (843 - var7)
    yield var11
    var12 = -1049566306 | -471 ^ var7 | var10
    yield var12
    var13 = arg3 & var11
    yield var13
    var14 = (var8 & var6 & var10) + var12
    yield var14
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 2
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 28'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
